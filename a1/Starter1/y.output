Terminals unused in grammar

   LT
   GT


Grammar

    0 $accept: program $end

    1 program: tokens

    2 tokens: tokens token
    3       | /* empty */

    4 token: IDENTIFIER
    5      | QUALIFIER_CONST
    6      | SEPERATOR
    7      | COMPLEXDATA
    8      | IF
    9      | ELSE
   10      | WHILE
   11      | FOR
   12      | BOOL
   13      | INT
   14      | FLOAT
   15      | AND
   16      | OR
   17      | EQ
   18      | NEQ
   19      | LE
   20      | GE
   21      | '+'
   22      | '-'
   23      | '*'
   24      | '/'
   25      | '='
   26      | '^'
   27      | '!'
   28      | '<'
   29      | '>'
   30      | '('
   31      | ')'
   32      | '{'
   33      | '}'
   34      | '['
   35      | ']'
   36      | ';'


Terminals, with rules where they appear

$end (0) 0
'!' (33) 27
'(' (40) 30
')' (41) 31
'*' (42) 23
'+' (43) 21
'-' (45) 22
'/' (47) 24
';' (59) 36
'<' (60) 28
'=' (61) 25
'>' (62) 29
'[' (91) 34
']' (93) 35
'^' (94) 26
'{' (123) 32
'}' (125) 33
error (256)
IDENTIFIER (258) 4
QUALIFIER_CONST (259) 5
SEPERATOR (260) 6
COMPLEXDATA (261) 7
IF (262) 8
ELSE (263) 9
FOR (264) 11
WHILE (265) 10
BOOL (266) 12
INT (267) 13
FLOAT (268) 14
AND (269) 15
OR (270) 16
EQ (271) 17
NEQ (272) 18
LT (273)
LE (274) 19
GT (275)
GE (276) 20


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
program (39)
    on left: 1, on right: 0
tokens (40)
    on left: 2 3, on right: 1 2
token (41)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26 27 28 29 30 31 32 33 34 35 36, on right: 2


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (tokens)

    program  go to state 1
    tokens   go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: tokens .
    2 tokens: tokens . token

    IDENTIFIER       shift, and go to state 4
    QUALIFIER_CONST  shift, and go to state 5
    SEPERATOR        shift, and go to state 6
    COMPLEXDATA      shift, and go to state 7
    IF               shift, and go to state 8
    ELSE             shift, and go to state 9
    FOR              shift, and go to state 10
    WHILE            shift, and go to state 11
    BOOL             shift, and go to state 12
    INT              shift, and go to state 13
    FLOAT            shift, and go to state 14
    '+'              shift, and go to state 15
    '-'              shift, and go to state 16
    '*'              shift, and go to state 17
    '/'              shift, and go to state 18
    '='              shift, and go to state 19
    '^'              shift, and go to state 20
    '<'              shift, and go to state 21
    '>'              shift, and go to state 22
    AND              shift, and go to state 23
    OR               shift, and go to state 24
    EQ               shift, and go to state 25
    NEQ              shift, and go to state 26
    LE               shift, and go to state 27
    GE               shift, and go to state 28
    '('              shift, and go to state 29
    ')'              shift, and go to state 30
    '['              shift, and go to state 31
    ']'              shift, and go to state 32
    '{'              shift, and go to state 33
    '}'              shift, and go to state 34
    '!'              shift, and go to state 35
    ';'              shift, and go to state 36

    $default  reduce using rule 1 (program)

    token  go to state 37


state 3

    0 $accept: program $end .

    $default  accept


state 4

    4 token: IDENTIFIER .

    $default  reduce using rule 4 (token)


state 5

    5 token: QUALIFIER_CONST .

    $default  reduce using rule 5 (token)


state 6

    6 token: SEPERATOR .

    $default  reduce using rule 6 (token)


state 7

    7 token: COMPLEXDATA .

    $default  reduce using rule 7 (token)


state 8

    8 token: IF .

    $default  reduce using rule 8 (token)


state 9

    9 token: ELSE .

    $default  reduce using rule 9 (token)


state 10

   11 token: FOR .

    $default  reduce using rule 11 (token)


state 11

   10 token: WHILE .

    $default  reduce using rule 10 (token)


state 12

   12 token: BOOL .

    $default  reduce using rule 12 (token)


state 13

   13 token: INT .

    $default  reduce using rule 13 (token)


state 14

   14 token: FLOAT .

    $default  reduce using rule 14 (token)


state 15

   21 token: '+' .

    $default  reduce using rule 21 (token)


state 16

   22 token: '-' .

    $default  reduce using rule 22 (token)


state 17

   23 token: '*' .

    $default  reduce using rule 23 (token)


state 18

   24 token: '/' .

    $default  reduce using rule 24 (token)


state 19

   25 token: '=' .

    $default  reduce using rule 25 (token)


state 20

   26 token: '^' .

    $default  reduce using rule 26 (token)


state 21

   28 token: '<' .

    $default  reduce using rule 28 (token)


state 22

   29 token: '>' .

    $default  reduce using rule 29 (token)


state 23

   15 token: AND .

    $default  reduce using rule 15 (token)


state 24

   16 token: OR .

    $default  reduce using rule 16 (token)


state 25

   17 token: EQ .

    $default  reduce using rule 17 (token)


state 26

   18 token: NEQ .

    $default  reduce using rule 18 (token)


state 27

   19 token: LE .

    $default  reduce using rule 19 (token)


state 28

   20 token: GE .

    $default  reduce using rule 20 (token)


state 29

   30 token: '(' .

    $default  reduce using rule 30 (token)


state 30

   31 token: ')' .

    $default  reduce using rule 31 (token)


state 31

   34 token: '[' .

    $default  reduce using rule 34 (token)


state 32

   35 token: ']' .

    $default  reduce using rule 35 (token)


state 33

   32 token: '{' .

    $default  reduce using rule 32 (token)


state 34

   33 token: '}' .

    $default  reduce using rule 33 (token)


state 35

   27 token: '!' .

    $default  reduce using rule 27 (token)


state 36

   36 token: ';' .

    $default  reduce using rule 36 (token)


state 37

    2 tokens: tokens token .

    $default  reduce using rule 2 (tokens)
