Terminals unused in grammar

   AND
   NEQ
   EQ
   LEQ
   GEQ
   '<'
   '>'
   '+'
   '-'
   '*'
   '/'
   '^'
   '!'


Grammar

    0 $accept: program $end

    1 program: scope

    2 scope: '{' declarations statements '}'

    3 declarations: declarations declaration
    4             | %empty

    5 statements: statements statement
    6           | %empty

    7 declaration: type ID ';'
    8            | type ID '=' expression ';'
    9            | CONST type ID '=' expression ';'

   10 statement: variable '=' expression ';'
   11          | IF '(' expression ')' statement
   12          | IF '(' expression ')' statement ELSE statement
   13          | WHILE '(' expression ')' statement
   14          | scope
   15          | ';'

   16 type: FLOAT_T
   17     | INT_T
   18     | BOOL_T
   19     | VEC_T
   20     | IVEC_T
   21     | BVEC_T

   22 expression: variable
   23           | constructor
   24           | function
   25           | INT_C
   26           | FLOAT_C
   27           | UMINUS expression
   28           | expression OR expression
   29           | FALSE_C
   30           | TRUE_C
   31           | '(' expression ')'

   32 variable: ID
   33         | ID '[' INT_T ']'

   34 constructor: type '(' arguments ')'

   35 function: function_name '(' arguments_opt ')'

   36 function_name: FUNC

   37 arguments_opt: arguments
   38              | %empty

   39 arguments: arguments ',' expression
   40          | expression


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'(' (40) 11 12 13 31 34 35
')' (41) 11 12 13 31 34 35
'*' (42)
'+' (43)
',' (44) 39
'-' (45)
'/' (47)
';' (59) 7 8 9 10 15
'<' (60)
'=' (61) 8 9 10
'>' (62)
'[' (91) 33
']' (93) 33
'^' (94)
'{' (123) 2
'}' (125) 2
error (256)
FLOAT_T (258) 16
INT_T (259) 17 33
BOOL_T (260) 18
CONST (261) 9
FALSE_C (262) 29
TRUE_C (263) 30
FUNC (264) 36
IF (265) 11 12
WHILE (266) 13
ELSE (267) 12
AND (268)
OR (269) 28
NEQ (270)
EQ (271)
LEQ (272)
GEQ (273)
VEC_T (274) 19
BVEC_T (275) 21
IVEC_T (276) 20
FLOAT_C (277) 26
INT_C (278) 25
ID (279) 7 8 9 32 33
UMINUS (280) 27
NO_ELSE (281)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 1, on right: 0
scope (46)
    on left: 2, on right: 1 14
declarations (47)
    on left: 3 4, on right: 2 3
statements (48)
    on left: 5 6, on right: 2 5
declaration (49)
    on left: 7 8 9, on right: 3
statement (50)
    on left: 10 11 12 13 14 15, on right: 5 11 12 13
type (51)
    on left: 16 17 18 19 20 21, on right: 7 8 9 34
expression (52)
    on left: 22 23 24 25 26 27 28 29 30 31, on right: 8 9 10 11 12
    13 27 28 31 39 40
variable (53)
    on left: 32 33, on right: 10 22
constructor (54)
    on left: 34, on right: 23
function (55)
    on left: 35, on right: 24
function_name (56)
    on left: 36, on right: 35
arguments_opt (57)
    on left: 37 38, on right: 35
arguments (58)
    on left: 39 40, on right: 34 37 39


State 0

    0 $accept: . program $end

    '{'  shift, and go to state 1

    program  go to state 2
    scope    go to state 3


State 1

    2 scope: '{' . declarations statements '}'

    $default  reduce using rule 4 (declarations)

    declarations  go to state 4


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: scope .

    $default  reduce using rule 1 (program)


State 4

    2 scope: '{' declarations . statements '}'
    3 declarations: declarations . declaration

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    CONST    shift, and go to state 9
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    $default  reduce using rule 6 (statements)

    statements   go to state 13
    declaration  go to state 14
    type         go to state 15


State 5

    0 $accept: program $end .

    $default  accept


State 6

   16 type: FLOAT_T .

    $default  reduce using rule 16 (type)


State 7

   17 type: INT_T .

    $default  reduce using rule 17 (type)


State 8

   18 type: BOOL_T .

    $default  reduce using rule 18 (type)


State 9

    9 declaration: CONST . type ID '=' expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    type  go to state 16


State 10

   19 type: VEC_T .

    $default  reduce using rule 19 (type)


State 11

   21 type: BVEC_T .

    $default  reduce using rule 21 (type)


State 12

   20 type: IVEC_T .

    $default  reduce using rule 20 (type)


State 13

    2 scope: '{' declarations statements . '}'
    5 statements: statements . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    '}'    shift, and go to state 20
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 23
    variable   go to state 24


State 14

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


State 15

    7 declaration: type . ID ';'
    8            | type . ID '=' expression ';'

    ID  shift, and go to state 25


State 16

    9 declaration: CONST type . ID '=' expression ';'

    ID  shift, and go to state 26


State 17

   11 statement: IF . '(' expression ')' statement
   12          | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 27


State 18

   13 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 28


State 19

   32 variable: ID .
   33         | ID . '[' INT_T ']'

    '['  shift, and go to state 29

    $default  reduce using rule 32 (variable)


State 20

    2 scope: '{' declarations statements '}' .

    $default  reduce using rule 2 (scope)


State 21

   15 statement: ';' .

    $default  reduce using rule 15 (statement)


State 22

   14 statement: scope .

    $default  reduce using rule 14 (statement)


State 23

    5 statements: statements statement .

    $default  reduce using rule 5 (statements)


State 24

   10 statement: variable . '=' expression ';'

    '='  shift, and go to state 30


State 25

    7 declaration: type ID . ';'
    8            | type ID . '=' expression ';'

    '='  shift, and go to state 31
    ';'  shift, and go to state 32


State 26

    9 declaration: CONST type ID . '=' expression ';'

    '='  shift, and go to state 33


State 27

   11 statement: IF '(' . expression ')' statement
   12          | IF '(' . expression ')' statement ELSE statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 42
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 28

   13 statement: WHILE '(' . expression ')' statement

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 47
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 29

   33 variable: ID '[' . INT_T ']'

    INT_T  shift, and go to state 48


State 30

   10 statement: variable '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 49
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 31

    8 declaration: type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 50
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 32

    7 declaration: type ID ';' .

    $default  reduce using rule 7 (declaration)


State 33

    9 declaration: CONST type ID '=' . expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 51
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 34

   29 expression: FALSE_C .

    $default  reduce using rule 29 (expression)


State 35

   30 expression: TRUE_C .

    $default  reduce using rule 30 (expression)


State 36

   36 function_name: FUNC .

    $default  reduce using rule 36 (function_name)


State 37

   26 expression: FLOAT_C .

    $default  reduce using rule 26 (expression)


State 38

   25 expression: INT_C .

    $default  reduce using rule 25 (expression)


State 39

   27 expression: UMINUS . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 52
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 40

   31 expression: '(' . expression ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 53
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 41

   34 constructor: type . '(' arguments ')'

    '('  shift, and go to state 54


State 42

   11 statement: IF '(' expression . ')' statement
   12          | IF '(' expression . ')' statement ELSE statement
   28 expression: expression . OR expression

    OR   shift, and go to state 55
    ')'  shift, and go to state 56


State 43

   22 expression: variable .

    $default  reduce using rule 22 (expression)


State 44

   23 expression: constructor .

    $default  reduce using rule 23 (expression)


State 45

   24 expression: function .

    $default  reduce using rule 24 (expression)


State 46

   35 function: function_name . '(' arguments_opt ')'

    '('  shift, and go to state 57


State 47

   13 statement: WHILE '(' expression . ')' statement
   28 expression: expression . OR expression

    OR   shift, and go to state 55
    ')'  shift, and go to state 58


State 48

   33 variable: ID '[' INT_T . ']'

    ']'  shift, and go to state 59


State 49

   10 statement: variable '=' expression . ';'
   28 expression: expression . OR expression

    OR   shift, and go to state 55
    ';'  shift, and go to state 60


State 50

    8 declaration: type ID '=' expression . ';'
   28 expression: expression . OR expression

    OR   shift, and go to state 55
    ';'  shift, and go to state 61


State 51

    9 declaration: CONST type ID '=' expression . ';'
   28 expression: expression . OR expression

    OR   shift, and go to state 55
    ';'  shift, and go to state 62


State 52

   27 expression: UMINUS expression .
   28           | expression . OR expression

    $default  reduce using rule 27 (expression)


State 53

   28 expression: expression . OR expression
   31           | '(' expression . ')'

    OR   shift, and go to state 55
    ')'  shift, and go to state 63


State 54

   34 constructor: type '(' . arguments ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 64
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46
    arguments      go to state 65


State 55

   28 expression: expression OR . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 66
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 56

   11 statement: IF '(' expression ')' . statement
   12          | IF '(' expression ')' . statement ELSE statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 67
    variable   go to state 24


State 57

   35 function: function_name '(' . arguments_opt ')'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    $default  reduce using rule 38 (arguments_opt)

    type           go to state 41
    expression     go to state 64
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46
    arguments_opt  go to state 68
    arguments      go to state 69


State 58

   13 statement: WHILE '(' expression ')' . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 70
    variable   go to state 24


State 59

   33 variable: ID '[' INT_T ']' .

    $default  reduce using rule 33 (variable)


State 60

   10 statement: variable '=' expression ';' .

    $default  reduce using rule 10 (statement)


State 61

    8 declaration: type ID '=' expression ';' .

    $default  reduce using rule 8 (declaration)


State 62

    9 declaration: CONST type ID '=' expression ';' .

    $default  reduce using rule 9 (declaration)


State 63

   31 expression: '(' expression ')' .

    $default  reduce using rule 31 (expression)


State 64

   28 expression: expression . OR expression
   40 arguments: expression .

    OR  shift, and go to state 55

    $default  reduce using rule 40 (arguments)


State 65

   34 constructor: type '(' arguments . ')'
   39 arguments: arguments . ',' expression

    ')'  shift, and go to state 71
    ','  shift, and go to state 72


State 66

   28 expression: expression . OR expression
   28           | expression OR expression .

    $default  reduce using rule 28 (expression)


State 67

   11 statement: IF '(' expression ')' statement .
   12          | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 73

    $default  reduce using rule 11 (statement)


State 68

   35 function: function_name '(' arguments_opt . ')'

    ')'  shift, and go to state 74


State 69

   37 arguments_opt: arguments .
   39 arguments: arguments . ',' expression

    ','  shift, and go to state 72

    $default  reduce using rule 37 (arguments_opt)


State 70

   13 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 13 (statement)


State 71

   34 constructor: type '(' arguments ')' .

    $default  reduce using rule 34 (constructor)


State 72

   39 arguments: arguments ',' . expression

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    FALSE_C  shift, and go to state 34
    TRUE_C   shift, and go to state 35
    FUNC     shift, and go to state 36
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12
    FLOAT_C  shift, and go to state 37
    INT_C    shift, and go to state 38
    ID       shift, and go to state 19
    UMINUS   shift, and go to state 39
    '('      shift, and go to state 40

    type           go to state 41
    expression     go to state 75
    variable       go to state 43
    constructor    go to state 44
    function       go to state 45
    function_name  go to state 46


State 73

   12 statement: IF '(' expression ')' statement ELSE . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 76
    variable   go to state 24


State 74

   35 function: function_name '(' arguments_opt ')' .

    $default  reduce using rule 35 (function)


State 75

   28 expression: expression . OR expression
   39 arguments: arguments ',' expression .

    OR  shift, and go to state 55

    $default  reduce using rule 39 (arguments)


State 76

   12 statement: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 12 (statement)
