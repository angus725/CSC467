Terminals unused in grammar

   FALSE_C
   TRUE_C
   FUNC
   AND
   OR
   NEQ
   EQ
   LEQ
   GEQ
   FLOAT_C
   INT_C
   '<'
   '>'
   '+'
   '-'
   '*'
   '/'
   '^'
   '!'
   UMINUS
   '['


Grammar

    0 $accept: program $end

    1 program: scope

    2 scope: '{' declarations statements '}'

    3 declarations: declarations declaration
    4             | /* empty */

    5 statements: statements statement
    6           | /* empty */

    7 declaration: type ID ':'
    8            | type ID '=' expression ';'
    9            | CONST type ID '=' expression ';'

   10 statement: variable '=' expression ';'
   11          | IF '(' expression ')' statement
   12          | IF '(' expression ')' statement ELSE statement
   13          | WHILE '(' expression ')' statement
   14          | scope
   15          | ';'

   16 type: FLOAT_T
   17     | INT_T
   18     | BOOL_T
   19     | VEC_T
   20     | IVEC_T
   21     | BVEC_T

   22 expression: variable

   23 variable: ID


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'(' (40) 11 12 13
')' (41) 11 12 13
'*' (42)
'+' (43)
'-' (45)
'/' (47)
':' (58) 7
';' (59) 8 9 10 15
'<' (60)
'=' (61) 8 9 10
'>' (62)
'[' (91)
'^' (94)
'{' (123) 2
'}' (125) 2
error (256)
FLOAT_T (258) 16
INT_T (259) 17
BOOL_T (260) 18
CONST (261) 9
FALSE_C (262)
TRUE_C (263)
FUNC (264)
IF (265) 11 12
WHILE (266) 13
ELSE (267) 12
AND (268)
OR (269)
NEQ (270)
EQ (271)
LEQ (272)
GEQ (273)
VEC_T (274) 19
BVEC_T (275) 21
IVEC_T (276) 20
FLOAT_C (277)
INT_C (278)
ID (279) 7 8 9 23
UMINUS (280)
NO_ELSE (281)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
scope (45)
    on left: 2, on right: 1 14
declarations (46)
    on left: 3 4, on right: 2 3
statements (47)
    on left: 5 6, on right: 2 5
declaration (48)
    on left: 7 8 9, on right: 3
statement (49)
    on left: 10 11 12 13 14 15, on right: 5 11 12 13
type (50)
    on left: 16 17 18 19 20 21, on right: 7 8 9
expression (51)
    on left: 22, on right: 8 9 10 11 12 13
variable (52)
    on left: 23, on right: 10 22


state 0

    0 $accept: . program $end

    '{'  shift, and go to state 1

    program  go to state 2
    scope    go to state 3


state 1

    2 scope: '{' . declarations statements '}'

    $default  reduce using rule 4 (declarations)

    declarations  go to state 4


state 2

    0 $accept: program . $end

    $end  shift, and go to state 5


state 3

    1 program: scope .

    $default  reduce using rule 1 (program)


state 4

    2 scope: '{' declarations . statements '}'
    3 declarations: declarations . declaration

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    CONST    shift, and go to state 9
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    $default  reduce using rule 6 (statements)

    statements   go to state 13
    declaration  go to state 14
    type         go to state 15


state 5

    0 $accept: program $end .

    $default  accept


state 6

   16 type: FLOAT_T .

    $default  reduce using rule 16 (type)


state 7

   17 type: INT_T .

    $default  reduce using rule 17 (type)


state 8

   18 type: BOOL_T .

    $default  reduce using rule 18 (type)


state 9

    9 declaration: CONST . type ID '=' expression ';'

    FLOAT_T  shift, and go to state 6
    INT_T    shift, and go to state 7
    BOOL_T   shift, and go to state 8
    VEC_T    shift, and go to state 10
    BVEC_T   shift, and go to state 11
    IVEC_T   shift, and go to state 12

    type  go to state 16


state 10

   19 type: VEC_T .

    $default  reduce using rule 19 (type)


state 11

   21 type: BVEC_T .

    $default  reduce using rule 21 (type)


state 12

   20 type: IVEC_T .

    $default  reduce using rule 20 (type)


state 13

    2 scope: '{' declarations statements . '}'
    5 statements: statements . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    '}'    shift, and go to state 20
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 23
    variable   go to state 24


state 14

    3 declarations: declarations declaration .

    $default  reduce using rule 3 (declarations)


state 15

    7 declaration: type . ID ':'
    8            | type . ID '=' expression ';'

    ID  shift, and go to state 25


state 16

    9 declaration: CONST type . ID '=' expression ';'

    ID  shift, and go to state 26


state 17

   11 statement: IF . '(' expression ')' statement
   12          | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 27


state 18

   13 statement: WHILE . '(' expression ')' statement

    '('  shift, and go to state 28


state 19

   23 variable: ID .

    $default  reduce using rule 23 (variable)


state 20

    2 scope: '{' declarations statements '}' .

    $default  reduce using rule 2 (scope)


state 21

   15 statement: ';' .

    $default  reduce using rule 15 (statement)


state 22

   14 statement: scope .

    $default  reduce using rule 14 (statement)


state 23

    5 statements: statements statement .

    $default  reduce using rule 5 (statements)


state 24

   10 statement: variable . '=' expression ';'

    '='  shift, and go to state 29


state 25

    7 declaration: type ID . ':'
    8            | type ID . '=' expression ';'

    '='  shift, and go to state 30
    ':'  shift, and go to state 31


state 26

    9 declaration: CONST type ID . '=' expression ';'

    '='  shift, and go to state 32


state 27

   11 statement: IF '(' . expression ')' statement
   12          | IF '(' . expression ')' statement ELSE statement

    ID  shift, and go to state 19

    expression  go to state 33
    variable    go to state 34


state 28

   13 statement: WHILE '(' . expression ')' statement

    ID  shift, and go to state 19

    expression  go to state 35
    variable    go to state 34


state 29

   10 statement: variable '=' . expression ';'

    ID  shift, and go to state 19

    expression  go to state 36
    variable    go to state 34


state 30

    8 declaration: type ID '=' . expression ';'

    ID  shift, and go to state 19

    expression  go to state 37
    variable    go to state 34


state 31

    7 declaration: type ID ':' .

    $default  reduce using rule 7 (declaration)


state 32

    9 declaration: CONST type ID '=' . expression ';'

    ID  shift, and go to state 19

    expression  go to state 38
    variable    go to state 34


state 33

   11 statement: IF '(' expression . ')' statement
   12          | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 39


state 34

   22 expression: variable .

    $default  reduce using rule 22 (expression)


state 35

   13 statement: WHILE '(' expression . ')' statement

    ')'  shift, and go to state 40


state 36

   10 statement: variable '=' expression . ';'

    ';'  shift, and go to state 41


state 37

    8 declaration: type ID '=' expression . ';'

    ';'  shift, and go to state 42


state 38

    9 declaration: CONST type ID '=' expression . ';'

    ';'  shift, and go to state 43


state 39

   11 statement: IF '(' expression ')' . statement
   12          | IF '(' expression ')' . statement ELSE statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 44
    variable   go to state 24


state 40

   13 statement: WHILE '(' expression ')' . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 45
    variable   go to state 24


state 41

   10 statement: variable '=' expression ';' .

    $default  reduce using rule 10 (statement)


state 42

    8 declaration: type ID '=' expression ';' .

    $default  reduce using rule 8 (declaration)


state 43

    9 declaration: CONST type ID '=' expression ';' .

    $default  reduce using rule 9 (declaration)


state 44

   11 statement: IF '(' expression ')' statement .
   12          | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 46

    $default  reduce using rule 11 (statement)


state 45

   13 statement: WHILE '(' expression ')' statement .

    $default  reduce using rule 13 (statement)


state 46

   12 statement: IF '(' expression ')' statement ELSE . statement

    IF     shift, and go to state 17
    WHILE  shift, and go to state 18
    ID     shift, and go to state 19
    '{'    shift, and go to state 1
    ';'    shift, and go to state 21

    scope      go to state 22
    statement  go to state 47
    variable   go to state 24


state 47

   12 statement: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 12 (statement)
